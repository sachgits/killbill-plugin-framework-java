package org.killbill.billing.plugin.models;

import java.security.MessageDigest;
import java.security.Security;
import java.security.PublicKey;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import javax.crypto.Cipher;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.google.common.primitives.UnsignedInts;

import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;

@JsonAutoDetect(getterVisibility= Visibility.DEFAULT,setterVisibility= Visibility.DEFAULT,fieldVisibility= Visibility.ANY)
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(Include.NON_EMPTY)
public abstract  class MpesaCoreBase {

    /**
     * 
     * @param bizShortCode
     */

    public MpesaCoreBase( int bizShortCode) {
        BusinessShortCode = bizShortCode;

        /*
        String datetimeStamp = DateTimeFormat.forPattern("yyyyMMddhhmmss").print(DateTime.now());
        timestamp = Long.valueOf(datetimeStamp);
        */

        Passkey = APIResourceConstants.SecurityConstants.SECURITY_CREDENTIAL; //TODO: below

        String tempPassword = String.valueOf(BusinessShortCode) + Passkey; //+ String.valueOf(timestamp);
        Password = encryptInitiatorPassword(tempPassword);
    }

    /**
     * asslong a s the password is the real one and certificate exist's in certifacatePath
     * this function will do the job even though there is room for improvements
     * @param certificatePath
     * @param passwodString
     * @return
     */
    public String encryptInitiatorPassword(String passwodString){
        String encryptedPassword = ""; //YOUR_INITIATOR_PASSWORD
        byte [] input = passwodString.getBytes();

        try {
            Security.addProvider(new BouncyCastleProvider());
            Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding", "BC");
            ClassLoader cLoader = Thread.currentThread().getContextClassLoader();
            InputStream fInputStream = cLoader.getResourceAsStream(
                APIResourceConstants.SecurityConstants.MPESA_CERTIFICATE);
            
            CertificateFactory cFactory = CertificateFactory.getInstance("X.509");
            X509Certificate x509Cert = (X509Certificate)cFactory.generateCertificate(fInputStream);

            PublicKey pKey = x509Cert.getPublicKey();
            cipher.init(Cipher.ENCRYPT_MODE, pKey);

            byte [] cipherText  = cipher.doFinal(input);

            encryptedPassword = Base64.encodeBase64String(cipherText);

        } catch (Exception e) {
            //TODO: handle exception
            logger.error("was unable to encrypt the password from mpesa plugin: %s", e);
        }

        return encryptedPassword;
    }

    /**
     * the password for encrypting request. This is generated by Base64 encoding BusinessShortcode
     * Passkey and timeStamp
     * @return Base64 encoded password
     * TODO: error prone as this might not be was was really intended by Mpesa test alot pleasee....
     */
    public String settPassword(){
        String commbinedPassword = String.valueOf(BusinessShortCode) + Passkey + String.valueOf(timestamp);
        byte[] combinedBytes = commbinedPassword.getBytes();
        return Base64.encodeBase64String(combinedBytes);
    }


    @JsonProperty("SecurityCredential")
    public String Password;

    /**
     * TimeStamp of the transaction in the format 
     * {yyyyMMddhhmmss}
     * error might arise here due to date format about so test well
     
    @JsonProperty("TimeStamp")
    public Long timestamp;
    */

    @JsonIgnore
    public int BusinessShortCode;

    /**
     * Passkey = bfb279f9aa9bdbcf158e97dd71a467cd2e0c893059b10f78e6b72ada1ed2c919
     * password Apitest425#
     */
    @JsonIgnore
    private String Passkey;

    private static final Logger logger = LoggerFactory.getLogger(MpesaCoreBase.class);


}